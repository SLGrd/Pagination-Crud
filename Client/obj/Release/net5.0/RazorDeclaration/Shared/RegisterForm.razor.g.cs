// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Client.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Tutorials\Paging\Client\_Imports.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Tutorials\Paging\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Tutorials\Paging\Client\_Imports.razor"
using Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Tutorials\Paging\Client\_Imports.razor"
using Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
using static Common.GLB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
using Common.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
using System.Net.Http.Headers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
using System.Text.Encodings;

#line default
#line hidden
#nullable disable
    public partial class RegisterForm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 80 "D:\Tutorials\Paging\Client\Shared\RegisterForm.razor"
      
        [Parameter]
        public AmigoModel amg { get; set; }
        [Parameter]
        public string FormAction { get; set; }
        [Parameter]
        public EventCallback Refresh { get; set; }

        public bool ShowButton = true;
        public string Msg = "Status messages";

        protected override void OnInitialized()
        {
                base.OnInitialized();               
        }

        public async void ValidSubmit()
        {
                if (FormAction.Equals("A")) 
                {
                        await CreateAmigosAsync(amg);
                        await CallBackRoutine();
                        ShowButton = false;
                }     
                
                if (FormAction.Equals("U")) 
                {
                        await UpdateAmigosAsync(amg);
                        await CallBackRoutine();
                        ShowButton = false;
                }    
        }

        private async Task<string> CreateAmigosAsync( AmigoModel amg)
        {      
                try
                {            
                        using ( HttpClient h = new())
                        {
                                h.DefaultRequestHeaders.ConnectionClose = true;
                                //      Informa o endereço base (parte fixa) da API. Exemplo : https://localhost:44301/
                                h.BaseAddress = new Uri( BaseAddress); 
                               //       Serialize object to be sent on Request body
                                var content =  new StringContent( JsonConvert.SerializeObject( amg), System.Text.Encoding.UTF8, "application/json");

                                //  Envia o request (getasync) com o URI universal resource identifier
                                using (HttpResponseMessage m = await h.PostAsync($"api/Amigos/Create", content))
                                {
                                        if (m.IsSuccessStatusCode)
                                        {
                                                //  Recebe a resposta com os dados requisitados e converte no Amigos Model   
                                                var dados = await m.Content.ReadAsStringAsync();
                                                amg = JsonConvert.DeserializeObject<AmigoModel>(dados);
                                                Msg = "Status " + $"{m.StatusCode} - " + "Record inserted at Row #" + amg.RowId;                                                                     
                                        }
                                        else
                                                Msg = "Status " + $"{m.StatusCode} - " + m.ReasonPhrase;                        
                                }
                        }
                }
                catch (Exception ex) { Msg = ex.Message; }
                return Msg;
        }

        private async Task<string> UpdateAmigosAsync( AmigoModel amg)
        {      
                try
                {            
                        using ( HttpClient h = new())
                        {
                                h.DefaultRequestHeaders.ConnectionClose = true;
                                //      Informa o endereço base (parte fixa) da API. Exemplo : https://localhost:44301/
                                h.BaseAddress = new Uri( BaseAddress); 
                               //       Serialize object to be sent on Request body
                                var content =  new StringContent( JsonConvert.SerializeObject( amg), System.Text.Encoding.UTF8, "application/json");

                                //  Envia o request (getasync) com o URI universal resource identifier
                                using (HttpResponseMessage m = await h.PutAsync($"api/Amigos/Update", content))
                                {
                                        if (m.IsSuccessStatusCode)
                                        {
                                                //  Recebe a resposta com os dados requisitados e converte no Amigos Model   
                                                var dados = await m.Content.ReadAsStringAsync();
                                                amg = JsonConvert.DeserializeObject<AmigoModel>(dados);
                                                Msg = "Status " + $"{m.StatusCode} - " + "Record inserted at Row #" + amg.RowId;                                                                     
                                        }
                                        else
                                                Msg = "Status " + $"{m.StatusCode} - " + m.ReasonPhrase;                        
                                }
                        }
                }
                catch (Exception ex) { Msg = ex.Message; }
                return Msg;
        }

        public async void Delete( int rowId)
        {
                try
                {            
                        using ( HttpClient h = new())
                        {
                                h.DefaultRequestHeaders.ConnectionClose = true;
                                //  Envia o request (getasync) com o URI universal resource identifier
                                using (HttpResponseMessage m = await h.DeleteAsync( BaseAddress + $"/api/Amigos/Delete/{rowId}"))
                                {
                                        if (m.IsSuccessStatusCode)
                                        {
                                                Msg = "Status " + $"{m.StatusCode} - " + "Record inserted at Row #" + amg.RowId;                                                                     
                                        }
                                        else
                                                Msg = "Status " + $"{m.StatusCode} - " + m.ReasonPhrase;
                                }
                        }
                }
                catch (Exception ex) { Msg = ex.Message; }

                await CallBackRoutine();
        }

        private void Close()
        {               
                ShowButton = true;
        }

        public async Task CallBackRoutine()
        {
                await Refresh.InvokeAsync();
        }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
